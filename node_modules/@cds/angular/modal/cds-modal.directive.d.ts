import { ElementRef, EventEmitter } from '@angular/core';
import { CdsModal } from '@cds/core/modal';
import * as i0 from "@angular/core";
export declare class CdsModalDirective {
    protected element: CdsModal;
    get i18n(): {
        closeButtonAriaLabel: string;
        contentStart: string;
        contentBox: string;
        contentEnd: string;
    };
    set i18n(value: {
        closeButtonAriaLabel: string;
        contentStart: string;
        contentBox: string;
        contentEnd: string;
    });
    get closable(): boolean | '';
    set closable(value: boolean | '');
    get size(): "default" | "sm" | "lg" | "xl";
    set size(value: "default" | "sm" | "lg" | "xl");
    get content(): HTMLElement;
    set content(value: HTMLElement);
    get modalHeader(): import("@cds/core/modal").CdsModalHeader;
    set modalHeader(value: import("@cds/core/modal").CdsModalHeader);
    get modalFooter(): import("@cds/core/modal").CdsModalActions;
    set modalFooter(value: import("@cds/core/modal").CdsModalActions);
    get cdsMotion(): string;
    set cdsMotion(value: string);
    get hidden(): boolean | '';
    set hidden(value: boolean | '');
    get closeOverlay(): (trigger?: import("@cds/core/internal").CloseChangeType) => void;
    set closeOverlay(value: (trigger?: import("@cds/core/internal").CloseChangeType) => void);
    cdsMotionChange: EventEmitter<CustomEvent>;
    closeChange: EventEmitter<CustomEvent>;
    constructor(elementRef: ElementRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<CdsModalDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdsModalDirective, "cds-modal", never, { "i18n": "i18n"; "closable": "closable"; "size": "size"; "content": "content"; "modalHeader": "modalHeader"; "modalFooter": "modalFooter"; "cdsMotion": "cdsMotion"; "hidden": "hidden"; "closeOverlay": "closeOverlay"; }, { "cdsMotionChange": "cdsMotionChange"; "closeChange": "closeChange"; }, never>;
}
