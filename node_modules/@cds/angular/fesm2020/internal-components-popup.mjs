import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import '@cds/core/internal-components/popup/register.js';

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalPopupDirective {
    constructor(elementRef) {
        this.cdsMotionChange = new EventEmitter();
        this.closeChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get cdsMotion() {
        return this.element.cdsMotion;
    }
    set cdsMotion(value) {
        this.element.cdsMotion = value;
    }
    ;
    get trigger() {
        return this.element.trigger;
    }
    set trigger(value) {
        this.element.trigger = value;
    }
    ;
    get anchor() {
        return this.element.anchor;
    }
    set anchor(value) {
        this.element.anchor = value;
    }
    ;
    get anchorAlign() {
        return this.element.anchorAlign;
    }
    set anchorAlign(value) {
        this.element.anchorAlign = value;
    }
    ;
    get mainAxisOffset() {
        return this.element.mainAxisOffset;
    }
    set mainAxisOffset(value) {
        this.element.mainAxisOffset = value;
    }
    ;
    get crossAxisOffset() {
        return this.element.crossAxisOffset;
    }
    set crossAxisOffset(value) {
        this.element.crossAxisOffset = value;
    }
    ;
    get orientation() {
        return this.element.orientation;
    }
    set orientation(value) {
        this.element.orientation = value;
    }
    ;
    get closable() {
        return this.element.closable;
    }
    set closable(value) {
        this.element.closable = value === '' ? true : value;
    }
    ;
    get pointerAlign() {
        return this.element.pointerAlign;
    }
    set pointerAlign(value) {
        this.element.pointerAlign = value;
    }
    ;
    get defaultPointerType() {
        return this.element.defaultPointerType;
    }
    set defaultPointerType(value) {
        this.element.defaultPointerType = value;
    }
    ;
    get pointer() {
        return this.element.pointer;
    }
    set pointer(value) {
        this.element.pointer = value;
    }
    ;
    get hidden() {
        return this.element.hidden;
    }
    set hidden(value) {
        this.element.hidden = value === '' ? true : value;
    }
    ;
    get closeOverlay() {
        return this.element.closeOverlay;
    }
    set closeOverlay(value) {
        this.element.closeOverlay = value;
    }
    ;
}
CdsInternalPopupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalPopupDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsInternalPopupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsInternalPopupDirective, selector: "cds-internal-popup", inputs: { i18n: "i18n", cdsMotion: "cdsMotion", trigger: "trigger", anchor: "anchor", anchorAlign: "anchorAlign", mainAxisOffset: "mainAxisOffset", crossAxisOffset: "crossAxisOffset", orientation: "orientation", closable: "closable", pointerAlign: "pointerAlign", defaultPointerType: "defaultPointerType", pointer: "pointer", hidden: "hidden", closeOverlay: "closeOverlay" }, outputs: { cdsMotionChange: "cdsMotionChange", closeChange: "closeChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalPopupDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-internal-popup' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { i18n: [{
                type: Input
            }], cdsMotion: [{
                type: Input
            }], trigger: [{
                type: Input
            }], anchor: [{
                type: Input
            }], anchorAlign: [{
                type: Input
            }], mainAxisOffset: [{
                type: Input
            }], crossAxisOffset: [{
                type: Input
            }], orientation: [{
                type: Input
            }], closable: [{
                type: Input
            }], pointerAlign: [{
                type: Input
            }], defaultPointerType: [{
                type: Input
            }], pointer: [{
                type: Input
            }], hidden: [{
                type: Input
            }], closeOverlay: [{
                type: Input
            }], cdsMotionChange: [{
                type: Output
            }], closeChange: [{
                type: Output
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalPointerDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get axisAlign() {
        return this.element.axisAlign;
    }
    set axisAlign(value) {
        this.element.axisAlign = value;
    }
    ;
    get type() {
        return this.element.type;
    }
    set type(value) {
        this.element.type = value;
    }
    ;
}
CdsInternalPointerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalPointerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsInternalPointerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsInternalPointerDirective, selector: "cds-internal-pointer", inputs: { axisAlign: "axisAlign", type: "type" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalPointerDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-internal-pointer' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { axisAlign: [{
                type: Input
            }], type: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalComponentsPopupModule {
}
CdsInternalComponentsPopupModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalComponentsPopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CdsInternalComponentsPopupModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalComponentsPopupModule, declarations: [CdsInternalPopupDirective,
        CdsInternalPointerDirective], imports: [CommonModule], exports: [CdsInternalPopupDirective,
        CdsInternalPointerDirective] });
CdsInternalComponentsPopupModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalComponentsPopupModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalComponentsPopupModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        CdsInternalPopupDirective,
                        CdsInternalPointerDirective,
                    ],
                    exports: [
                        CdsInternalPopupDirective,
                        CdsInternalPointerDirective,
                    ],
                }]
        }] });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CdsInternalComponentsPopupModule, CdsInternalPointerDirective, CdsInternalPopupDirective };
//# sourceMappingURL=internal-components-popup.mjs.map
