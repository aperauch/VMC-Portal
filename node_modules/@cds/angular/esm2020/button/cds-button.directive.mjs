/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class CdsButtonDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get action() {
        return this.element.action;
    }
    set action(value) {
        this.element.action = value;
    }
    ;
    get status() {
        return this.element.status;
    }
    set status(value) {
        this.element.status = value;
    }
    ;
    get size() {
        return this.element.size;
    }
    set size(value) {
        this.element.size = value;
    }
    ;
    get block() {
        return this.element.block;
    }
    set block(value) {
        this.element.block = value === '' ? true : value;
    }
    ;
    get loadingState() {
        return this.element.loadingState;
    }
    set loadingState(value) {
        this.element.loadingState = value;
    }
    ;
    get disabled() {
        return this.element.disabled;
    }
    set disabled(value) {
        this.element.disabled = value === '' ? true : value;
    }
    ;
    get isDefaultLoadingState() {
        return this.element.isDefaultLoadingState;
    }
    set isDefaultLoadingState(value) {
        this.element.isDefaultLoadingState = value;
    }
    ;
    get pressed() {
        return this.element.pressed;
    }
    set pressed(value) {
        this.element.pressed = value === '' ? true : value;
    }
    ;
    get expanded() {
        return this.element.expanded;
    }
    set expanded(value) {
        this.element.expanded = value === '' ? true : value;
    }
    ;
    get readonly() {
        return this.element.readonly;
    }
    set readonly(value) {
        this.element.readonly = value === '' ? true : value;
    }
    ;
    get type() {
        return this.element.type;
    }
    set type(value) {
        this.element.type = value;
    }
    ;
    get name() {
        return this.element.name;
    }
    set name(value) {
        this.element.name = value;
    }
    ;
    get value() {
        return this.element.value;
    }
    set value(value) {
        this.element.value = value;
    }
    ;
    get popup() {
        return this.element.popup;
    }
    set popup(value) {
        this.element.popup = value;
    }
    ;
}
CdsButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsButtonDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsButtonDirective, selector: "cds-button", inputs: { action: "action", status: "status", size: "size", block: "block", loadingState: "loadingState", disabled: "disabled", isDefaultLoadingState: "isDefaultLoadingState", pressed: "pressed", expanded: "expanded", readonly: "readonly", type: "type", name: "name", value: "value", popup: "popup" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsButtonDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-button' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { action: [{
                type: Input
            }], status: [{
                type: Input
            }], size: [{
                type: Input
            }], block: [{
                type: Input
            }], loadingState: [{
                type: Input
            }], disabled: [{
                type: Input
            }], isDefaultLoadingState: [{
                type: Input
            }], pressed: [{
                type: Input
            }], expanded: [{
                type: Input
            }], readonly: [{
                type: Input
            }], type: [{
                type: Input
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }], popup: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RzLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jZHMtYW5ndWxhci9idXR0b24vY2RzLWJ1dHRvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQWUsS0FBSyxFQUFJLE1BQU0sZUFBZSxDQUFDOztBQUloRSxNQUFNLE9BQU8sa0JBQWtCO0lBeUY3QixZQUFZLFVBQXNCO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUMxQyxDQUFDO0lBeEZELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQWEsTUFBTSxDQUFDLEtBQUs7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFBQSxDQUFDO0lBQ0YsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBQ0QsSUFBYSxNQUFNLENBQUMsS0FBSztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUFBLENBQUM7SUFDRixJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFDRCxJQUFhLElBQUksQ0FBQyxLQUFLO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBQUEsQ0FBQztJQUNGLElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUNELElBQWEsS0FBSyxDQUFDLEtBQW1CO1FBQ3BDLElB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QUM1QixDQUFDO0lBQ0QsSUFBYSxLQUFLLENBQUMsS0FBSztRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUFBLENBQUM7OytHQXRGUyxrQkFBa0I7bUdBQWxCLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUQ5QixTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRTtpR0FPdEIsTUFBTTtzQkFBbEIsS0FBSztnQkFNTyxNQUFNO3NCQUFsQixLQUFLO2dCQU1PLElBQUk7c0JBQWhCLEtBQUs7Z0JBTU8sS0FBSztzQkFBakIsS0FBSztnQkFNTyxZQUFZO3NCQUF4QixLQUFLO2dCQU1PLFFBQVE7c0JBQXBCLEtBQUs7Z0JBTU8scUJBQXFCO3NCQUFqQyxLQUFLO2dCQU1PLE9BQU87c0JBQW5CLEtBQUs7Z0JBTU8sUUFBUTtzQkFBcEIsS0FBSztnQkFNTyxRQUFRO3NCQUFwQixLQUFLO2dCQU1PLElBQUk7c0JBQWhCLEtBQUs7Z0JBTU8sSUFBSTtzQkFBaEIsS0FBSztnQkFNTyxLQUFLO3NCQUFqQixLQUFLO2dCQU1PLEtBQUs7c0JBQWpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiAsIElucHV0ICAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENkc0J1dHRvbiB9IGZyb20gJ0BjZHMvY29yZS9idXR0b24nO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdjZHMtYnV0dG9uJyB9KVxuZXhwb3J0IGNsYXNzIENkc0J1dHRvbkRpcmVjdGl2ZSB7XG4gIHByb3RlY3RlZCBlbGVtZW50OiBDZHNCdXR0b247XG5cbiAgZ2V0IGFjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmFjdGlvbjtcbiAgfVxuICBASW5wdXQoKSBzZXQgYWN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50LmFjdGlvbiA9IHZhbHVlO1xuICB9O1xuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3RhdHVzO1xuICB9XG4gIEBJbnB1dCgpIHNldCBzdGF0dXModmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQuc3RhdHVzID0gdmFsdWU7XG4gIH07XG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2l6ZTtcbiAgfVxuICBASW5wdXQoKSBzZXQgc2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5zaXplID0gdmFsdWU7XG4gIH07XG4gIGdldCBibG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmJsb2NrO1xuICB9XG4gIEBJbnB1dCgpIHNldCBibG9jayh2YWx1ZTogYm9vbGVhbiB8ICcnKSB7XG4gICAgdGhpcy5lbGVtZW50LmJsb2NrID0gdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICB9O1xuICBnZXQgbG9hZGluZ1N0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQubG9hZGluZ1N0YXRlO1xuICB9XG4gIEBJbnB1dCgpIHNldCBsb2FkaW5nU3RhdGUodmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQubG9hZGluZ1N0YXRlID0gdmFsdWU7XG4gIH07XG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmRpc2FibGVkO1xuICB9XG4gIEBJbnB1dCgpIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbiB8ICcnKSB7XG4gICAgdGhpcy5lbGVtZW50LmRpc2FibGVkID0gdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICB9O1xuICBnZXQgaXNEZWZhdWx0TG9hZGluZ1N0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuaXNEZWZhdWx0TG9hZGluZ1N0YXRlO1xuICB9XG4gIEBJbnB1dCgpIHNldCBpc0RlZmF1bHRMb2FkaW5nU3RhdGUodmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQuaXNEZWZhdWx0TG9hZGluZ1N0YXRlID0gdmFsdWU7XG4gIH07XG4gIGdldCBwcmVzc2VkKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQucHJlc3NlZDtcbiAgfVxuICBASW5wdXQoKSBzZXQgcHJlc3NlZCh2YWx1ZTogYm9vbGVhbiB8ICcnKSB7XG4gICAgdGhpcy5lbGVtZW50LnByZXNzZWQgPSB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gIH07XG4gIGdldCBleHBhbmRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmV4cGFuZGVkO1xuICB9XG4gIEBJbnB1dCgpIHNldCBleHBhbmRlZCh2YWx1ZTogYm9vbGVhbiB8ICcnKSB7XG4gICAgdGhpcy5lbGVtZW50LmV4cGFuZGVkID0gdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICB9O1xuICBnZXQgcmVhZG9ubHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5yZWFkb25seTtcbiAgfVxuICBASW5wdXQoKSBzZXQgcmVhZG9ubHkodmFsdWU6IGJvb2xlYW4gfCAnJykge1xuICAgIHRoaXMuZWxlbWVudC5yZWFkb25seSA9IHZhbHVlID09PSAnJyA/IHRydWUgOiB2YWx1ZTtcbiAgfTtcbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC50eXBlO1xuICB9XG4gIEBJbnB1dCgpIHNldCB0eXBlKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50LnR5cGUgPSB2YWx1ZTtcbiAgfTtcbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5uYW1lO1xuICB9XG4gIEBJbnB1dCgpIHNldCBuYW1lKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50Lm5hbWUgPSB2YWx1ZTtcbiAgfTtcbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQudmFsdWU7XG4gIH1cbiAgQElucHV0KCkgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gIH07XG4gIGdldCBwb3B1cCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnBvcHVwO1xuICB9XG4gIEBJbnB1dCgpIHNldCBwb3B1cCh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5wb3B1cCA9IHZhbHVlO1xuICB9O1xuXG5cbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuIl19