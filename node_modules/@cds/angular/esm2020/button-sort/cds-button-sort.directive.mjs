/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class CdsButtonSortDirective {
    constructor(elementRef) {
        this.sortChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get sort() {
        return this.element.sort;
    }
    set sort(value) {
        this.element.sort = value;
    }
    ;
    get shape() {
        return this.element.shape;
    }
    set shape(value) {
        this.element.shape = value;
    }
    ;
    get action() {
        return this.element.action;
    }
    set action(value) {
        this.element.action = value;
    }
    ;
    get iconSize() {
        return this.element.iconSize;
    }
    set iconSize(value) {
        this.element.iconSize = value;
    }
    ;
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get pressed() {
        return this.element.pressed;
    }
    set pressed(value) {
        this.element.pressed = value === '' ? true : value;
    }
    ;
    get expanded() {
        return this.element.expanded;
    }
    set expanded(value) {
        this.element.expanded = value === '' ? true : value;
    }
    ;
    get readonly() {
        return this.element.readonly;
    }
    set readonly(value) {
        this.element.readonly = value === '' ? true : value;
    }
    ;
    get type() {
        return this.element.type;
    }
    set type(value) {
        this.element.type = value;
    }
    ;
    get name() {
        return this.element.name;
    }
    set name(value) {
        this.element.name = value;
    }
    ;
    get value() {
        return this.element.value;
    }
    set value(value) {
        this.element.value = value;
    }
    ;
    get disabled() {
        return this.element.disabled;
    }
    set disabled(value) {
        this.element.disabled = value === '' ? true : value;
    }
    ;
    get popup() {
        return this.element.popup;
    }
    set popup(value) {
        this.element.popup = value;
    }
    ;
}
CdsButtonSortDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsButtonSortDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsButtonSortDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsButtonSortDirective, selector: "cds-button-sort", inputs: { sort: "sort", shape: "shape", action: "action", iconSize: "iconSize", i18n: "i18n", pressed: "pressed", expanded: "expanded", readonly: "readonly", type: "type", name: "name", value: "value", disabled: "disabled", popup: "popup" }, outputs: { sortChange: "sortChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsButtonSortDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-button-sort' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { sort: [{
                type: Input
            }], shape: [{
                type: Input
            }], action: [{
                type: Input
            }], iconSize: [{
                type: Input
            }], i18n: [{
                type: Input
            }], pressed: [{
                type: Input
            }], expanded: [{
                type: Input
            }], readonly: [{
                type: Input
            }], type: [{
                type: Input
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], popup: [{
                type: Input
            }], sortChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RzLWJ1dHRvbi1zb3J0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkcy1hbmd1bGFyL2J1dHRvbi1zb3J0L2Nkcy1idXR0b24tc29ydC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQWUsS0FBSyxFQUFJLE1BQU0sRUFBRSxZQUFZLEVBQUcsTUFBTSxlQUFlLENBQUM7O0FBSXZGLE1BQU0sT0FBTyxzQkFBc0I7SUFvRmpDLFlBQVksVUFBc0I7UUFGeEIsZUFBVSxHQUE4QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBR25FLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUMxQyxDQUFDO0lBbkZELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQWEsSUFBSSxDQUFDLEtBQUs7UUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFBQSxDQUFDO0lBQ0YsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFBYSxLQUFLLENBQUMsS0FBSztRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUFBLENBQUM7SUFDRixJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFhLE1BQU0sQ0FBQyxLQUFLO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBQUEsQ0FBQztJQUNGLElBQUksUUFBUTtRQUNWLE9BQU8sSUFB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QkFEbEMsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRTtpR0FPM0IsSUFBSTtzQkFBaEIsS0FBSztnQkFNTyxLQUFLO3NCQUFqQixLQUFLO2dCQU1PLE1BQU07c0JBQWxCLEtBQUs7Z0JBTU8sUUFBUTtzQkFBcEIsS0FBSztnQkFNTyxJQUFJO3NCQUFoQixLQUFLO2dCQU1PLE9BQU87c0JBQW5CLEtBQUs7Z0JBTU8sUUFBUTtzQkFBcEIsS0FBSztnQkFNTyxRQUFRO3NCQUFwQixLQUFLO2dCQU1PLElBQUk7c0JBQWhCLEtBQUs7Z0JBTU8sSUFBSTtzQkFBaEIsS0FBSztnQkFNTyxLQUFLO3NCQUFqQixLQUFLO2dCQU1PLFFBQVE7c0JBQXBCLEtBQUs7Z0JBTU8sS0FBSztzQkFBakIsS0FBSztnQkFJSSxVQUFVO3NCQUFuQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIyIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYgLCBJbnB1dCAgLCBPdXRwdXQsIEV2ZW50RW1pdHRlciAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENkc0J1dHRvblNvcnQgfSBmcm9tICdAY2RzL2NvcmUvYnV0dG9uLXNvcnQnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdjZHMtYnV0dG9uLXNvcnQnIH0pXG5leHBvcnQgY2xhc3MgQ2RzQnV0dG9uU29ydERpcmVjdGl2ZSB7XG4gIHByb3RlY3RlZCBlbGVtZW50OiBDZHNCdXR0b25Tb3J0O1xuXG4gIGdldCBzb3J0KCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc29ydDtcbiAgfVxuICBASW5wdXQoKSBzZXQgc29ydCh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5zb3J0ID0gdmFsdWU7XG4gIH07XG4gIGdldCBzaGFwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoYXBlO1xuICB9XG4gIEBJbnB1dCgpIHNldCBzaGFwZSh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5zaGFwZSA9IHZhbHVlO1xuICB9O1xuICBnZXQgYWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuYWN0aW9uO1xuICB9XG4gIEBJbnB1dCgpIHNldCBhY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQuYWN0aW9uID0gdmFsdWU7XG4gIH07XG4gIGdldCBpY29uU2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Lmljb25TaXplO1xuICB9XG4gIEBJbnB1dCgpIHNldCBpY29uU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5pY29uU2l6ZSA9IHZhbHVlO1xuICB9O1xuICBnZXQgaTE4bigpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmkxOG47XG4gIH1cbiAgQElucHV0KCkgc2V0IGkxOG4odmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQuaTE4biA9IHZhbHVlO1xuICB9O1xuICBnZXQgcHJlc3NlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnByZXNzZWQ7XG4gIH1cbiAgQElucHV0KCkgc2V0IHByZXNzZWQodmFsdWU6IGJvb2xlYW4gfCAnJykge1xuICAgIHRoaXMuZWxlbWVudC5wcmVzc2VkID0gdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICB9O1xuICBnZXQgZXhwYW5kZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5leHBhbmRlZDtcbiAgfVxuICBASW5wdXQoKSBzZXQgZXhwYW5kZWQodmFsdWU6IGJvb2xlYW4gfCAnJykge1xuICAgIHRoaXMuZWxlbWVudC5leHBhbmRlZCA9IHZhbHVlID09PSAnJyA/IHRydWUgOiB2YWx1ZTtcbiAgfTtcbiAgZ2V0IHJlYWRvbmx5KCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQucmVhZG9ubHk7XG4gIH1cbiAgQElucHV0KCkgc2V0IHJlYWRvbmx5KHZhbHVlOiBib29sZWFuIHwgJycpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVhZG9ubHkgPSB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gIH07XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQudHlwZTtcbiAgfVxuICBASW5wdXQoKSBzZXQgdHlwZSh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC50eXBlID0gdmFsdWU7XG4gIH07XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQubmFtZTtcbiAgfVxuICBASW5wdXQoKSBzZXQgbmFtZSh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5uYW1lID0gdmFsdWU7XG4gIH07XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnZhbHVlO1xuICB9XG4gIEBJbnB1dCgpIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9O1xuICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5kaXNhYmxlZDtcbiAgfVxuICBASW5wdXQoKSBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4gfCAnJykge1xuICAgIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IHZhbHVlID09PSAnJyA/IHRydWUgOiB2YWx1ZTtcbiAgfTtcbiAgZ2V0IHBvcHVwKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQucG9wdXA7XG4gIH1cbiAgQElucHV0KCkgc2V0IHBvcHVwKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50LnBvcHVwID0gdmFsdWU7XG4gIH07XG5cbiAgQE91dHB1dCgpIHNvcnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuIl19