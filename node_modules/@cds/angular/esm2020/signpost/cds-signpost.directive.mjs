/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class CdsSignpostDirective {
    constructor(elementRef) {
        this.cdsMotionChange = new EventEmitter();
        this.closeChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get closable() {
        return this.element.closable;
    }
    set closable(value) {
        this.element.closable = value === '' ? true : value;
    }
    ;
    get defaultPointerType() {
        return this.element.defaultPointerType;
    }
    set defaultPointerType(value) {
        this.element.defaultPointerType = value;
    }
    ;
    get trigger() {
        return this.element.trigger;
    }
    set trigger(value) {
        this.element.trigger = value;
    }
    ;
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get cdsMotion() {
        return this.element.cdsMotion;
    }
    set cdsMotion(value) {
        this.element.cdsMotion = value;
    }
    ;
    get anchor() {
        return this.element.anchor;
    }
    set anchor(value) {
        this.element.anchor = value;
    }
    ;
    get anchorAlign() {
        return this.element.anchorAlign;
    }
    set anchorAlign(value) {
        this.element.anchorAlign = value;
    }
    ;
    get mainAxisOffset() {
        return this.element.mainAxisOffset;
    }
    set mainAxisOffset(value) {
        this.element.mainAxisOffset = value;
    }
    ;
    get crossAxisOffset() {
        return this.element.crossAxisOffset;
    }
    set crossAxisOffset(value) {
        this.element.crossAxisOffset = value;
    }
    ;
    get orientation() {
        return this.element.orientation;
    }
    set orientation(value) {
        this.element.orientation = value;
    }
    ;
    get pointerAlign() {
        return this.element.pointerAlign;
    }
    set pointerAlign(value) {
        this.element.pointerAlign = value;
    }
    ;
    get pointer() {
        return this.element.pointer;
    }
    set pointer(value) {
        this.element.pointer = value;
    }
    ;
    get hidden() {
        return this.element.hidden;
    }
    set hidden(value) {
        this.element.hidden = value === '' ? true : value;
    }
    ;
    get closeOverlay() {
        return this.element.closeOverlay;
    }
    set closeOverlay(value) {
        this.element.closeOverlay = value;
    }
    ;
}
CdsSignpostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsSignpostDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsSignpostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsSignpostDirective, selector: "cds-signpost", inputs: { closable: "closable", defaultPointerType: "defaultPointerType", trigger: "trigger", i18n: "i18n", cdsMotion: "cdsMotion", anchor: "anchor", anchorAlign: "anchorAlign", mainAxisOffset: "mainAxisOffset", crossAxisOffset: "crossAxisOffset", orientation: "orientation", pointerAlign: "pointerAlign", pointer: "pointer", hidden: "hidden", closeOverlay: "closeOverlay" }, outputs: { cdsMotionChange: "cdsMotionChange", closeChange: "closeChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsSignpostDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-signpost' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { closable: [{
                type: Input
            }], defaultPointerType: [{
                type: Input
            }], trigger: [{
                type: Input
            }], i18n: [{
                type: Input
            }], cdsMotion: [{
                type: Input
            }], anchor: [{
                type: Input
            }], anchorAlign: [{
                type: Input
            }], mainAxisOffset: [{
                type: Input
            }], crossAxisOffset: [{
                type: Input
            }], orientation: [{
                type: Input
            }], pointerAlign: [{
                type: Input
            }], pointer: [{
                type: Input
            }], hidden: [{
                type: Input
            }], closeOverlay: [{
                type: Input
            }], cdsMotionChange: [{
                type: Output
            }], closeChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,