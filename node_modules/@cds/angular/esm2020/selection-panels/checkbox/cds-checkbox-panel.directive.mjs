/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class CdsCheckboxPanelDirective {
    constructor(elementRef) {
        this.layoutChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get size() {
        return this.element.size;
    }
    set size(value) {
        this.element.size = value;
    }
    ;
    get controlAlign() {
        return this.element.controlAlign;
    }
    set controlAlign(value) {
        this.element.controlAlign = value;
    }
    ;
    get status() {
        return this.element.status;
    }
    set status(value) {
        this.element.status = value;
    }
    ;
    get controlWidth() {
        return this.element.controlWidth;
    }
    set controlWidth(value) {
        this.element.controlWidth = value;
    }
    ;
    get validate() {
        return this.element.validate;
    }
    set validate(value) {
        this.element.validate = value === '' ? true : value;
    }
    ;
    get responsive() {
        return this.element.responsive;
    }
    set responsive(value) {
        this.element.responsive = value === '' ? true : value;
    }
    ;
    get layout() {
        return this.element.layout;
    }
    set layout(value) {
        this.element.layout = value;
    }
    ;
}
CdsCheckboxPanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsCheckboxPanelDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsCheckboxPanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsCheckboxPanelDirective, selector: "cds-checkbox-panel", inputs: { size: "size", controlAlign: "controlAlign", status: "status", controlWidth: "controlWidth", validate: "validate", responsive: "responsive", layout: "layout" }, outputs: { layoutChange: "layoutChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsCheckboxPanelDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-checkbox-panel' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { size: [{
                type: Input
            }], controlAlign: [{
                type: Input
            }], status: [{
                type: Input
            }], controlWidth: [{
                type: Input
            }], validate: [{
                type: Input
            }], responsive: [{
                type: Input
            }], layout: [{
                type: Input
            }], layoutChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RzLWNoZWNrYm94LXBhbmVsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkcy1hbmd1bGFyL3NlbGVjdGlvbi1wYW5lbHMvY2hlY2tib3gvY2RzLWNoZWNrYm94LXBhbmVsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBZSxLQUFLLEVBQUksTUFBTSxFQUFFLFlBQVksRUFBRyxNQUFNLGVBQWUsQ0FBQzs7QUFJdkYsTUFBTSxPQUFPLHlCQUF5QjtJQWdEcEMsWUFBWSxVQUFzQjtRQUZ4QixpQkFBWSxHQUE4QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3JFLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUMxQyxDQUFDO0lBL0NELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQWEsSUFBSSxDQUFDLEtBQUs7UUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFBQSxDQUFDO0lBQ0YsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUNuQyxDQUFDO0lBQ0QsSUFBYSxZQUFZLENBQUMsS0FBSztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUFBLENBQUM7SUFDRixJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFhLE1BQU0sQ0FBQyxLQUFLO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBQUEsQ0FBQztJQUNGLElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQWEsWUFBWSxDQUFDLEtBQUs7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQ3BDLENBQUM7SUFBQSxDQUFDO0lBQ0YsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMvQixDQUFDO0lBQ0QsSUFBYSxRQUFRLENBQUMsS0FBbUI7UUFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDdEQsQ0FBQztJQUFBLENBQUM7SUFDRixJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFhLFVBQVUsQ0FBQyxLQUFtQjtRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUN4RCxDQUFDO0lBQUEsQ0FBQztJQUNGLElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQWEsTUFBTSxDQUFDLEtBQUs7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFBQSxDQUFDOztzSEE1Q1MseUJBQXlCOzBHQUF6Qix5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFEckMsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTtpR0FPOUIsSUFBSTtzQkFBaEIsS0FBSztnQkFNTyxZQUFZO3NCQUF4QixLQUFLO2dCQU1PLE1BQU07c0JBQWxCLEtBQUs7Z0JBTU8sWUFBWTtzQkFBeEIsS0FBSztnQkFNTyxRQUFRO3NCQUFwQixLQUFLO2dCQU1PLFVBQVU7c0JBQXRCLEtBQUs7Z0JBTU8sTUFBTTtzQkFBbEIsS0FBSztnQkFJSSxZQUFZO3NCQUFyQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIyIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYgLCBJbnB1dCAgLCBPdXRwdXQsIEV2ZW50RW1pdHRlciAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENkc0NoZWNrYm94UGFuZWwgfSBmcm9tICdAY2RzL2NvcmUvc2VsZWN0aW9uLXBhbmVscy9jaGVja2JveCc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2Nkcy1jaGVja2JveC1wYW5lbCcgfSlcbmV4cG9ydCBjbGFzcyBDZHNDaGVja2JveFBhbmVsRGlyZWN0aXZlIHtcbiAgcHJvdGVjdGVkIGVsZW1lbnQ6IENkc0NoZWNrYm94UGFuZWw7XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaXplO1xuICB9XG4gIEBJbnB1dCgpIHNldCBzaXplKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50LnNpemUgPSB2YWx1ZTtcbiAgfTtcbiAgZ2V0IGNvbnRyb2xBbGlnbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNvbnRyb2xBbGlnbjtcbiAgfVxuICBASW5wdXQoKSBzZXQgY29udHJvbEFsaWduKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50LmNvbnRyb2xBbGlnbiA9IHZhbHVlO1xuICB9O1xuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3RhdHVzO1xuICB9XG4gIEBJbnB1dCgpIHNldCBzdGF0dXModmFsdWUpIHtcbiAgICB0aGlzLmVsZW1lbnQuc3RhdHVzID0gdmFsdWU7XG4gIH07XG4gIGdldCBjb250cm9sV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jb250cm9sV2lkdGg7XG4gIH1cbiAgQElucHV0KCkgc2V0IGNvbnRyb2xXaWR0aCh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5jb250cm9sV2lkdGggPSB2YWx1ZTtcbiAgfTtcbiAgZ2V0IHZhbGlkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQudmFsaWRhdGU7XG4gIH1cbiAgQElucHV0KCkgc2V0IHZhbGlkYXRlKHZhbHVlOiBib29sZWFuIHwgJycpIHtcbiAgICB0aGlzLmVsZW1lbnQudmFsaWRhdGUgPSB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gIH07XG4gIGdldCByZXNwb25zaXZlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQucmVzcG9uc2l2ZTtcbiAgfVxuICBASW5wdXQoKSBzZXQgcmVzcG9uc2l2ZSh2YWx1ZTogYm9vbGVhbiB8ICcnKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlc3BvbnNpdmUgPSB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gIH07XG4gIGdldCBsYXlvdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5sYXlvdXQ7XG4gIH1cbiAgQElucHV0KCkgc2V0IGxheW91dCh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5sYXlvdXQgPSB2YWx1ZTtcbiAgfTtcblxuICBAT3V0cHV0KCkgbGF5b3V0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==