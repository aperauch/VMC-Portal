import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import '@cds/core/navigation/register.js';

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationDirective {
    constructor(elementRef) {
        this.cdsMotionChange = new EventEmitter();
        this.expandedChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get expandedRoot() {
        return this.element.expandedRoot;
    }
    set expandedRoot(value) {
        this.element.expandedRoot = value === '' ? true : value;
    }
    ;
    get cdsMotion() {
        return this.element.cdsMotion;
    }
    set cdsMotion(value) {
        this.element.cdsMotion = value;
    }
    ;
    get expanded() {
        return this.element.expanded;
    }
    set expanded(value) {
        this.element.expanded = value === '' ? true : value;
    }
    ;
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get onStartItemSlotChange() {
        return this.element.onStartItemSlotChange;
    }
    set onStartItemSlotChange(value) {
        this.element.onStartItemSlotChange = value;
    }
    ;
    get onItemSlotChange() {
        return this.element.onItemSlotChange;
    }
    set onItemSlotChange(value) {
        this.element.onItemSlotChange = value;
    }
    ;
    get updateChildrenProps() {
        return this.element.updateChildrenProps;
    }
    set updateChildrenProps(value) {
        this.element.updateChildrenProps = value;
    }
    ;
}
CdsNavigationDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsNavigationDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsNavigationDirective, selector: "cds-navigation", inputs: { expandedRoot: "expandedRoot", cdsMotion: "cdsMotion", expanded: "expanded", i18n: "i18n", onStartItemSlotChange: "onStartItemSlotChange", onItemSlotChange: "onItemSlotChange", updateChildrenProps: "updateChildrenProps" }, outputs: { cdsMotionChange: "cdsMotionChange", expandedChange: "expandedChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-navigation' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { expandedRoot: [{
                type: Input
            }], cdsMotion: [{
                type: Input
            }], expanded: [{
                type: Input
            }], i18n: [{
                type: Input
            }], onStartItemSlotChange: [{
                type: Input
            }], onItemSlotChange: [{
                type: Input
            }], updateChildrenProps: [{
                type: Input
            }], cdsMotionChange: [{
                type: Output
            }], expandedChange: [{
                type: Output
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationGroupDirective {
    constructor(elementRef) {
        this.cdsMotionChange = new EventEmitter();
        this.expandedChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get cdsMotion() {
        return this.element.cdsMotion;
    }
    set cdsMotion(value) {
        this.element.cdsMotion = value;
    }
    ;
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get expanded() {
        return this.element.expanded;
    }
    set expanded(value) {
        this.element.expanded = value === '' ? true : value;
    }
    ;
    get active() {
        return this.element.active;
    }
    set active(value) {
        this.element.active = value === '' ? true : value;
    }
    ;
    get hasFocus() {
        return this.element.hasFocus;
    }
    set hasFocus(value) {
        this.element.hasFocus = value === '' ? true : value;
    }
    ;
}
CdsNavigationGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationGroupDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsNavigationGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsNavigationGroupDirective, selector: "cds-navigation-group", inputs: { cdsMotion: "cdsMotion", i18n: "i18n", expanded: "expanded", active: "active", hasFocus: "hasFocus" }, outputs: { cdsMotionChange: "cdsMotionChange", expandedChange: "expandedChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationGroupDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-navigation-group' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { cdsMotion: [{
                type: Input
            }], i18n: [{
                type: Input
            }], expanded: [{
                type: Input
            }], active: [{
                type: Input
            }], hasFocus: [{
                type: Input
            }], cdsMotionChange: [{
                type: Output
            }], expandedChange: [{
                type: Output
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationStartDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get expandedRoot() {
        return this.element.expandedRoot;
    }
    set expandedRoot(value) {
        this.element.expandedRoot = value === '' ? true : value;
    }
    ;
    get hasFocus() {
        return this.element.hasFocus;
    }
    set hasFocus(value) {
        this.element.hasFocus = value;
    }
    ;
    get isGroupStart() {
        return this.element.isGroupStart;
    }
    set isGroupStart(value) {
        this.element.isGroupStart = value === '' ? true : value;
    }
    ;
    get navigationGroupId() {
        return this.element.navigationGroupId;
    }
    set navigationGroupId(value) {
        this.element.navigationGroupId = value;
    }
    ;
    get itemText() {
        return this.element.itemText;
    }
    set itemText(value) {
        this.element.itemText = value;
    }
    ;
}
CdsNavigationStartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationStartDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsNavigationStartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsNavigationStartDirective, selector: "cds-navigation-start", inputs: { i18n: "i18n", expandedRoot: "expandedRoot", hasFocus: "hasFocus", isGroupStart: "isGroupStart", navigationGroupId: "navigationGroupId", itemText: "itemText" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationStartDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-navigation-start' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { i18n: [{
                type: Input
            }], expandedRoot: [{
                type: Input
            }], hasFocus: [{
                type: Input
            }], isGroupStart: [{
                type: Input
            }], navigationGroupId: [{
                type: Input
            }], itemText: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationItemDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get active() {
        return this.element.active;
    }
    set active(value) {
        this.element.active = value === '' ? true : value;
    }
    ;
    get disabled() {
        return this.element.disabled;
    }
    set disabled(value) {
        this.element.disabled = value === '' ? true : value;
    }
    ;
    get expanded() {
        return this.element.expanded;
    }
    set expanded(value) {
        this.element.expanded = value === '' ? true : value;
    }
    ;
    get groupItem() {
        return this.element.groupItem;
    }
    set groupItem(value) {
        this.element.groupItem = value === '' ? true : value;
    }
    ;
    get hasFocus() {
        return this.element.hasFocus;
    }
    set hasFocus(value) {
        this.element.hasFocus = value;
    }
    ;
    get focusElement() {
        return this.element.focusElement;
    }
    set focusElement(value) {
        this.element.focusElement = value;
    }
    ;
    get itemText() {
        return this.element.itemText;
    }
    set itemText(value) {
        this.element.itemText = value;
    }
    ;
}
CdsNavigationItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationItemDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsNavigationItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsNavigationItemDirective, selector: "cds-navigation-item", inputs: { i18n: "i18n", active: "active", disabled: "disabled", expanded: "expanded", groupItem: "groupItem", hasFocus: "hasFocus", focusElement: "focusElement", itemText: "itemText" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-navigation-item' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { i18n: [{
                type: Input
            }], active: [{
                type: Input
            }], disabled: [{
                type: Input
            }], expanded: [{
                type: Input
            }], groupItem: [{
                type: Input
            }], hasFocus: [{
                type: Input
            }], focusElement: [{
                type: Input
            }], itemText: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationModule {
}
CdsNavigationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CdsNavigationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationModule, declarations: [CdsNavigationDirective,
        CdsNavigationGroupDirective,
        CdsNavigationStartDirective,
        CdsNavigationItemDirective], imports: [CommonModule], exports: [CdsNavigationDirective,
        CdsNavigationGroupDirective,
        CdsNavigationStartDirective,
        CdsNavigationItemDirective] });
CdsNavigationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsNavigationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        CdsNavigationDirective,
                        CdsNavigationGroupDirective,
                        CdsNavigationStartDirective,
                        CdsNavigationItemDirective,
                    ],
                    exports: [
                        CdsNavigationDirective,
                        CdsNavigationGroupDirective,
                        CdsNavigationStartDirective,
                        CdsNavigationItemDirective,
                    ],
                }]
        }] });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CdsNavigationDirective, CdsNavigationGroupDirective, CdsNavigationItemDirective, CdsNavigationModule, CdsNavigationStartDirective };
//# sourceMappingURL=navigation.mjs.map
