import * as i0 from '@angular/core';
import { Directive, Input, EventEmitter, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import '@cds/core/tree-view/register.js';

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTreeDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get multiSelect() {
        return this.element.multiSelect;
    }
    set multiSelect(value) {
        this.element.multiSelect = value === '' ? true : value;
    }
    ;
}
CdsTreeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsTreeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsTreeDirective, selector: "cds-tree", inputs: { multiSelect: "multiSelect" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-tree' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { multiSelect: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTreeItemDirective {
    constructor(elementRef) {
        this.cdsMotionChange = new EventEmitter();
        this.expandedChange = new EventEmitter();
        this.selectedChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get cdsMotion() {
        return this.element.cdsMotion;
    }
    set cdsMotion(value) {
        this.element.cdsMotion = value;
    }
    ;
    get multiSelect() {
        return this.element.multiSelect;
    }
    set multiSelect(value) {
        this.element.multiSelect = value === '' ? true : value;
    }
    ;
    get disabled() {
        return this.element.disabled;
    }
    set disabled(value) {
        this.element.disabled = value === '' ? true : value;
    }
    ;
    get expanded() {
        return this.element.expanded;
    }
    set expanded(value) {
        this.element.expanded = value === '' ? true : value;
    }
    ;
    get expandable() {
        return this.element.expandable;
    }
    set expandable(value) {
        this.element.expandable = value === '' ? true : value;
    }
    ;
    get indeterminate() {
        return this.element.indeterminate;
    }
    set indeterminate(value) {
        this.element.indeterminate = value === '' ? true : value;
    }
    ;
    get loading() {
        return this.element.loading;
    }
    set loading(value) {
        this.element.loading = value === '' ? true : value;
    }
    ;
    get selected() {
        return this.element.selected;
    }
    set selected(value) {
        this.element.selected = value === '' ? true : value;
    }
    ;
    get toggleExpanded() {
        return this.element.toggleExpanded;
    }
    set toggleExpanded(value) {
        this.element.toggleExpanded = value;
    }
    ;
    get toggleSelected() {
        return this.element.toggleSelected;
    }
    set toggleSelected(value) {
        this.element.toggleSelected = value;
    }
    ;
}
CdsTreeItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeItemDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsTreeItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsTreeItemDirective, selector: "cds-tree-item", inputs: { i18n: "i18n", cdsMotion: "cdsMotion", multiSelect: "multiSelect", disabled: "disabled", expanded: "expanded", expandable: "expandable", indeterminate: "indeterminate", loading: "loading", selected: "selected", toggleExpanded: "toggleExpanded", toggleSelected: "toggleSelected" }, outputs: { cdsMotionChange: "cdsMotionChange", expandedChange: "expandedChange", selectedChange: "selectedChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-tree-item' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { i18n: [{
                type: Input
            }], cdsMotion: [{
                type: Input
            }], multiSelect: [{
                type: Input
            }], disabled: [{
                type: Input
            }], expanded: [{
                type: Input
            }], expandable: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], loading: [{
                type: Input
            }], selected: [{
                type: Input
            }], toggleExpanded: [{
                type: Input
            }], toggleSelected: [{
                type: Input
            }], cdsMotionChange: [{
                type: Output
            }], expandedChange: [{
                type: Output
            }], selectedChange: [{
                type: Output
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTreeViewModule {
}
CdsTreeViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CdsTreeViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeViewModule, declarations: [CdsTreeDirective,
        CdsTreeItemDirective], imports: [CommonModule], exports: [CdsTreeDirective,
        CdsTreeItemDirective] });
CdsTreeViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeViewModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsTreeViewModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        CdsTreeDirective,
                        CdsTreeItemDirective,
                    ],
                    exports: [
                        CdsTreeDirective,
                        CdsTreeItemDirective,
                    ],
                }]
        }] });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CdsTreeDirective, CdsTreeItemDirective, CdsTreeViewModule };
//# sourceMappingURL=tree-view.mjs.map
