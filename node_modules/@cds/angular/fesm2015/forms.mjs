import * as i0 from '@angular/core';
import { Directive, Input, EventEmitter, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import '@cds/core/forms/register.js';

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsControlMessageDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get status() {
        return this.element.status;
    }
    set status(value) {
        this.element.status = value;
    }
    ;
    get error() {
        return this.element.error;
    }
    set error(value) {
        this.element.error = value;
    }
    ;
}
CdsControlMessageDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsControlMessageDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsControlMessageDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsControlMessageDirective, selector: "cds-control-message", inputs: { status: "status", error: "error" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsControlMessageDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-control-message' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { status: [{
                type: Input
            }], error: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsControlActionDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get action() {
        return this.element.action;
    }
    set action(value) {
        this.element.action = value;
    }
    ;
    get shape() {
        return this.element.shape;
    }
    set shape(value) {
        this.element.shape = value;
    }
    ;
    get iconSize() {
        return this.element.iconSize;
    }
    set iconSize(value) {
        this.element.iconSize = value;
    }
    ;
    get i18n() {
        return this.element.i18n;
    }
    set i18n(value) {
        this.element.i18n = value;
    }
    ;
    get pressed() {
        return this.element.pressed;
    }
    set pressed(value) {
        this.element.pressed = value === '' ? true : value;
    }
    ;
    get expanded() {
        return this.element.expanded;
    }
    set expanded(value) {
        this.element.expanded = value === '' ? true : value;
    }
    ;
    get readonly() {
        return this.element.readonly;
    }
    set readonly(value) {
        this.element.readonly = value === '' ? true : value;
    }
    ;
    get type() {
        return this.element.type;
    }
    set type(value) {
        this.element.type = value;
    }
    ;
    get name() {
        return this.element.name;
    }
    set name(value) {
        this.element.name = value;
    }
    ;
    get value() {
        return this.element.value;
    }
    set value(value) {
        this.element.value = value;
    }
    ;
    get disabled() {
        return this.element.disabled;
    }
    set disabled(value) {
        this.element.disabled = value === '' ? true : value;
    }
    ;
    get popup() {
        return this.element.popup;
    }
    set popup(value) {
        this.element.popup = value;
    }
    ;
}
CdsControlActionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsControlActionDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsControlActionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsControlActionDirective, selector: "cds-control-action", inputs: { action: "action", shape: "shape", iconSize: "iconSize", i18n: "i18n", pressed: "pressed", expanded: "expanded", readonly: "readonly", type: "type", name: "name", value: "value", disabled: "disabled", popup: "popup" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsControlActionDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-control-action' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { action: [{
                type: Input
            }], shape: [{
                type: Input
            }], iconSize: [{
                type: Input
            }], i18n: [{
                type: Input
            }], pressed: [{
                type: Input
            }], expanded: [{
                type: Input
            }], readonly: [{
                type: Input
            }], type: [{
                type: Input
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], popup: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalControlGroupDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get status() {
        return this.element.status;
    }
    set status(value) {
        this.element.status = value;
    }
    ;
    get layout() {
        return this.element.layout;
    }
    set layout(value) {
        this.element.layout = value;
    }
    ;
    get controlAlign() {
        return this.element.controlAlign;
    }
    set controlAlign(value) {
        this.element.controlAlign = value;
    }
    ;
    get disabled() {
        return this.element.disabled;
    }
    set disabled(value) {
        this.element.disabled = value === '' ? true : value;
    }
    ;
    get controlWidth() {
        return this.element.controlWidth;
    }
    set controlWidth(value) {
        this.element.controlWidth = value;
    }
    ;
    get responsive() {
        return this.element.responsive;
    }
    set responsive(value) {
        this.element.responsive = value === '' ? true : value;
    }
    ;
}
CdsInternalControlGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalControlGroupDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsInternalControlGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsInternalControlGroupDirective, selector: "cds-internal-control-group", inputs: { status: "status", layout: "layout", controlAlign: "controlAlign", disabled: "disabled", controlWidth: "controlWidth", responsive: "responsive" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalControlGroupDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-internal-control-group' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { status: [{
                type: Input
            }], layout: [{
                type: Input
            }], controlAlign: [{
                type: Input
            }], disabled: [{
                type: Input
            }], controlWidth: [{
                type: Input
            }], responsive: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsControlDirective {
    constructor(elementRef) {
        this.layoutChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get status() {
        return this.element.status;
    }
    set status(value) {
        this.element.status = value;
    }
    ;
    get controlWidth() {
        return this.element.controlWidth;
    }
    set controlWidth(value) {
        this.element.controlWidth = value;
    }
    ;
    get validate() {
        return this.element.validate;
    }
    set validate(value) {
        this.element.validate = value === '' ? true : value;
    }
    ;
    get responsive() {
        return this.element.responsive;
    }
    set responsive(value) {
        this.element.responsive = value === '' ? true : value;
    }
    ;
    get layout() {
        return this.element.layout;
    }
    set layout(value) {
        this.element.layout = value;
    }
    ;
}
CdsControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsControlDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsControlDirective, selector: "cds-control", inputs: { status: "status", controlWidth: "controlWidth", validate: "validate", responsive: "responsive", layout: "layout" }, outputs: { layoutChange: "layoutChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsControlDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-control' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { status: [{
                type: Input
            }], controlWidth: [{
                type: Input
            }], validate: [{
                type: Input
            }], responsive: [{
                type: Input
            }], layout: [{
                type: Input
            }], layoutChange: [{
                type: Output
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsFormGroupDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get layout() {
        return this.element.layout;
    }
    set layout(value) {
        this.element.layout = value;
    }
    ;
    get controlWidth() {
        return this.element.controlWidth;
    }
    set controlWidth(value) {
        this.element.controlWidth = value;
    }
    ;
    get responsive() {
        return this.element.responsive;
    }
    set responsive(value) {
        this.element.responsive = value === '' ? true : value;
    }
    ;
    get validate() {
        return this.element.validate;
    }
    set validate(value) {
        this.element.validate = value === '' ? true : value;
    }
    ;
}
CdsFormGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsFormGroupDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsFormGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsFormGroupDirective, selector: "cds-form-group", inputs: { layout: "layout", controlWidth: "controlWidth", responsive: "responsive", validate: "validate" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsFormGroupDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-form-group' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { layout: [{
                type: Input
            }], controlWidth: [{
                type: Input
            }], responsive: [{
                type: Input
            }], validate: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalControlInlineDirective {
    constructor(elementRef) {
        this.layoutChange = new EventEmitter();
        this.element = elementRef.nativeElement;
    }
    get controlAlign() {
        return this.element.controlAlign;
    }
    set controlAlign(value) {
        this.element.controlAlign = value;
    }
    ;
    get status() {
        return this.element.status;
    }
    set status(value) {
        this.element.status = value;
    }
    ;
    get controlWidth() {
        return this.element.controlWidth;
    }
    set controlWidth(value) {
        this.element.controlWidth = value;
    }
    ;
    get validate() {
        return this.element.validate;
    }
    set validate(value) {
        this.element.validate = value === '' ? true : value;
    }
    ;
    get responsive() {
        return this.element.responsive;
    }
    set responsive(value) {
        this.element.responsive = value === '' ? true : value;
    }
    ;
    get layout() {
        return this.element.layout;
    }
    set layout(value) {
        this.element.layout = value;
    }
    ;
}
CdsInternalControlInlineDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalControlInlineDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsInternalControlInlineDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsInternalControlInlineDirective, selector: "cds-internal-control-inline", inputs: { controlAlign: "controlAlign", status: "status", controlWidth: "controlWidth", validate: "validate", responsive: "responsive", layout: "layout" }, outputs: { layoutChange: "layoutChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalControlInlineDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-internal-control-inline' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { controlAlign: [{
                type: Input
            }], status: [{
                type: Input
            }], controlWidth: [{
                type: Input
            }], validate: [{
                type: Input
            }], responsive: [{
                type: Input
            }], layout: [{
                type: Input
            }], layoutChange: [{
                type: Output
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalControlLabelDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
    get disabled() {
        return this.element.disabled;
    }
    set disabled(value) {
        this.element.disabled = value === '' ? true : value;
    }
    ;
    get action() {
        return this.element.action;
    }
    set action(value) {
        this.element.action = value;
    }
    ;
}
CdsInternalControlLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalControlLabelDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
CdsInternalControlLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CdsInternalControlLabelDirective, selector: "cds-internal-control-label", inputs: { disabled: "disabled", action: "action" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsInternalControlLabelDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'cds-internal-control-label' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { disabled: [{
                type: Input
            }], action: [{
                type: Input
            }] } });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsFormsModule {
}
CdsFormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CdsFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsFormsModule, declarations: [CdsControlMessageDirective,
        CdsControlActionDirective,
        CdsInternalControlGroupDirective,
        CdsControlDirective,
        CdsFormGroupDirective,
        CdsInternalControlInlineDirective,
        CdsInternalControlLabelDirective], imports: [CommonModule], exports: [CdsControlMessageDirective,
        CdsControlActionDirective,
        CdsInternalControlGroupDirective,
        CdsControlDirective,
        CdsFormGroupDirective,
        CdsInternalControlInlineDirective,
        CdsInternalControlLabelDirective] });
CdsFormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsFormsModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CdsFormsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        CdsControlMessageDirective,
                        CdsControlActionDirective,
                        CdsInternalControlGroupDirective,
                        CdsControlDirective,
                        CdsFormGroupDirective,
                        CdsInternalControlInlineDirective,
                        CdsInternalControlLabelDirective,
                    ],
                    exports: [
                        CdsControlMessageDirective,
                        CdsControlActionDirective,
                        CdsInternalControlGroupDirective,
                        CdsControlDirective,
                        CdsFormGroupDirective,
                        CdsInternalControlInlineDirective,
                        CdsInternalControlLabelDirective,
                    ],
                }]
        }] });

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CdsControlActionDirective, CdsControlDirective, CdsControlMessageDirective, CdsFormGroupDirective, CdsFormsModule, CdsInternalControlGroupDirective, CdsInternalControlInlineDirective, CdsInternalControlLabelDirective };
//# sourceMappingURL=forms.mjs.map
